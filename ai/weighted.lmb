letrec(
  [
    [state    . argv(0)],
    [ghostAIs . argv(1)],
    [index    . require('./lib/index')],
    [mod      . require('./lib/mod')],
    [mapArray . require('./lib/map')],
    [filter   . require('./lib/filter')],
    [sort     . require('./lib/sort')],
    [length   . require('./lib/length')],
    [reverse  . require('./lib/reverse')],
    [sum      . require('./lib/sum')],
    [lsd      . require('./lib/lsd')]
  ], letrec(
  [ [all . lsd()] ], letrec(
  [
    [isWall       . index(all, 1)],
    [isPill       . index(all, 3)],
    [isPowerPill  . index(all, 4)],
    [isFruitPos   . index(all, 5)],
    [map          . index(all, 8)],
    [cell         . index(all, 12)],
    [lambdaStatus . index(all, 9)],
    [ghostStatus  . index(all, 10)],
    [fruitStatus  . index(all, 11)],
    [vitality     . index(all, 13)],
    [location     . index(all, 14)],
    [direction    . index(all, 15)],
    [distance     . index(all, 33)],
    [navigate     . index(all, 32)],
    [up           . index(all, 22)],
    [right        . index(all, 23)],
    [down         . index(all, 24)],
    [left         . index(all, 25)],
    [isUp         . index(all, 26)],
    [isRight      . index(all, 27)],
    [isDown       . index(all, 28)],
    [isLeft       . index(all, 29)],
    [noFruit      . index(all, 30)],
    [hasFruit     . index(all, 31)]
  ], letrec(
  [
    [initial . left],
    [dangerFactor . 1],
    [valueFactor . 20],
    [pillFactor . 10],
    [powerFactor . 50],
    [fruitFactor . 1000],
    [distanceFactor . 2],
    [maxDistance . 8],
    [ccw . {|dir|
      mod(+(dir, 3), 4)
    }],
    [cw . {|dir|
      mod(+(dir, 1), 4)
    }],
    [locations . {|entities|
      mapArray(entities, location)
    }],
    [danger . {|pos| {|ghost|
      /(256, distance(pos, ghost))
    }}],
    [sumDanger . {|pos, ghosts|
      sum(mapArray(ghosts, danger(pos)))
    }],
    [estimateValue . {|pos, dir, map, fruit|
#debug(5547),
#debug(pos),
#debug(dir),
      letrec(
        [
          [distanceFactorSq . *(distanceFactor, distanceFactor)],
          [evaluate . {|pos, dir, level|
#debug(5549),
#debug(pos),
#debug(dir),
#debug(level),
            if(=(0, level), 0,
              letrec(
                [[spot . cell(map, navigate(pos, dir))]
,
[finish . {
#debug(5544),
#debug(level),
#debug(navigate(pos, dir)),
#debug(spot),
#debug(fruit),
                if(isWall(spot), 0,
                  +(
                    /(
                      sum(list(
                        *(pillFactor, isPill(spot)),
                        *(powerFactor, isPowerPill(spot)),
                        if(
                          hasFruit(fruit),
                          *(fruitFactor, isFruitPos(spot)),
                          0
                        )
                      )),
                      -(+(maxDistance, 1), level)
                    ),
                    sum(mapArray([up, right, left, down], {|next|
#debug(5541),
#debug(next),
                      if(=(next, mod(+(2, dir), 4)), 0,
                        evaluate(navigate(pos, dir), next, -(level, 1))
                      )
                    }))
                  )
                )
}]],
finish()
              )
            )
          }]
        ],
        evaluate(pos, dir, maxDistance)
        #sum(list(
        #  evaluate(there),
        #  /(evaluate(navigate(there, dir)), distanceFactor),
        #  /(evaluate(navigate(there, ccw(dir))), distanceFactor),
        #  /(evaluate(navigate(there, cw(dir))), distanceFactor),
        #  /(evaluate(navigate(navigate(there, dir), ccw(dir))), distanceFactorSq),
        #  /(evaluate(navigate(navigate(there, dir), cw(dir))), distanceFactorSq)
        #))
      )
    }],
    [openDirections . {|map, pos|
#debug(5535),
#debug(map),
#debug(pos),
      filter([up, right, down, left], {|dir|
#debug(5539),
#debug(dir),
        =(0, isWall(cell(map, navigate(pos, dir))))
      })
    }],
    [contains . {|list, el|
      if(atom(list), 0,
        if(=(car(list), el), 1, contains(cdr(list), el))
      )
    }]
  ],

  cons(initial, {|prev, state|
#debug(5500),
#debug(prev),
#debug(length(state)),
#debug(fruitStatus(state)),
    letrec(
      [
        [currentMap . map(state)],
        [currentLocation . location(lambdaStatus(state))],
        [currentGhosts . locations(ghostStatus(state))],
        [currentFruit . fruitStatus(state)],
        [pick . {|options|
#debug(5522),
#debug(options),
#debug(currentLocation),
#debug(currentGhosts),
#debug(currentFruit),
          let(
            [
              [dangers . mapArray([up, right, down, left], {|dir|
                sumDanger(navigate(currentLocation, dir), currentGhosts)
              })],
              [values . mapArray([up, right, down, left], {|dir|
                estimateValue(currentLocation, dir, currentMap, currentFruit)
              })]
            ],
            let(
              [[overall . mapArray([up, right, down, left], {|dir|
#debug(5589),
#debug(dir),
#debug(index(dangers, dir)),
#debug(index(values, dir)),
                let(
                  [
                    [danger . index(dangers, dir)],
                    [value . index(values, dir)]
                  ],
                  -(
                    # because integer math
                    +(/(value, dangerFactor), 100),
                    /(danger, valueFactor)
                  )
                )
              })]],
              letrec(
                [[select . {|best|
#debug(5592),
#debug(overall),
#debug(best),
                  if(atom(best), left,
                    if(
                      contains(options, car(best)),
                      if(
                        # break ties "randomly"
                        >(1, length(filter(overall, {|score| =(score, index(overall, car(best)))}))),
                        prev,
                        car(best)
                      ),
                      select(cdr(best))
                    )
                  )
                }]],
                let (
                  [[next . select(reverse(sort(overall)))]],
                  cons(if(=(prev, next), mod(+(prev, 1), 4), prev), next)
                )
              )
            )
          )
        }]
      ],
      pick(openDirections(currentMap, currentLocation))
      #debug(currentLocation)
    )
  })

))))
